
SH1106Lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001da  00800100  00000448  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000448  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010ff  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a4  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000695  00000000  00000000  0000205b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e8  00000000  00000000  000026f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dc  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000085e  00000000  00000000  00002db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003612  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3d       	cpi	r26, 0xDA	; 218
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 92 01 	call	0x324	; 0x324 <main>
  8e:	0c 94 22 02 	jmp	0x444	; 0x444 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <error>:
#include <avr/interrupt.h>
#include <string.h>
#include "font.h"

void error(){
	PORTB = (1<<LED_BUILTIN);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	85 b9       	out	0x05, r24	; 5
  9a:	ff cf       	rjmp	.-2      	; 0x9a <error+0x4>

0000009c <TWIinit>:
	while(1);
}

void TWIinit(){
	TWSR = 0x00;
  9c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
  a0:	8c e0       	ldi	r24, 0x0C	; 12
  a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  a6:	08 95       	ret

000000a8 <TWIstatus>:
}
// Check status code
void TWIstatus(uint8_t CODE){
	while (!(TWCR & (1<<TWINT)));
  a8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ac:	99 23       	and	r25, r25
  ae:	e4 f7       	brge	.-8      	; 0xa8 <TWIstatus>
	if ((TWSR & 0xF8) != CODE)
  b0:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b4:	28 7f       	andi	r18, 0xF8	; 248
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	11 f0       	breq	.+4      	; 0xc4 <TWIstatus+0x1c>
	error();
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <error>
  c4:	08 95       	ret

000000c6 <TWIwrite>:
}
// Send data and check status code
void TWIwrite(uint8_t DATA, uint8_t CODE){
	TWDR = DATA;
  c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
  ca:	84 e8       	ldi	r24, 0x84	; 132
  cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWIstatus(CODE);
  d0:	86 2f       	mov	r24, r22
  d2:	0e 94 54 00 	call	0xa8	; 0xa8 <TWIstatus>
  d6:	08 95       	ret

000000d8 <TWIread>:
}

uint8_t TWIread(uint8_t SLA_RW){
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	18 2f       	mov	r17, r24
	// Start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  e0:	cc eb       	ldi	r28, 0xBC	; 188
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	84 ea       	ldi	r24, 0xA4	; 164
  e6:	88 83       	st	Y, r24
	TWIstatus(0x10);
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	0e 94 54 00 	call	0xa8	; 0xa8 <TWIstatus>
	// Send slave address
	TWIwrite(SLA_RW, 0x40);
  ee:	60 e4       	ldi	r22, 0x40	; 64
  f0:	81 2f       	mov	r24, r17
  f2:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	TWCR |= (0<<TWEA);
  f6:	88 81       	ld	r24, Y
  f8:	88 83       	st	Y, r24
	TWIstatus(0x58);
  fa:	88 e5       	ldi	r24, 0x58	; 88
  fc:	0e 94 54 00 	call	0xa8	; 0xa8 <TWIstatus>
	return TWDR;
 100:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	08 95       	ret

0000010c <TWIbegin>:

void TWIbegin(uint8_t SLA_RW, uint8_t CODE){
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	c8 2f       	mov	r28, r24
 112:	d6 2f       	mov	r29, r22
	// Start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 114:	84 ea       	ldi	r24, 0xA4	; 164
 116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWIstatus(0x08);
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	0e 94 54 00 	call	0xa8	; 0xa8 <TWIstatus>
	// Send slave address
	TWIwrite(SLA_RW, CODE);
 120:	6d 2f       	mov	r22, r29
 122:	8c 2f       	mov	r24, r28
 124:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <TWIend>:

void TWIend(void){
	// Stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 12e:	84 e9       	ldi	r24, 0x94	; 148
 130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 134:	08 95       	ret

00000136 <OLEDwrite>:





void OLEDwrite(uint8_t DATA){
 136:	cf 93       	push	r28
 138:	c8 2f       	mov	r28, r24
	TWIbegin(DEVID, 0x18);
 13a:	68 e1       	ldi	r22, 0x18	; 24
 13c:	88 e7       	ldi	r24, 0x78	; 120
 13e:	0e 94 86 00 	call	0x10c	; 0x10c <TWIbegin>
	// RAM or COMMAND
	TWIwrite(COMMAND, 0x28);
 142:	68 e2       	ldi	r22, 0x28	; 40
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	//
	TWIwrite(DATA, 0x28);
 14a:	68 e2       	ldi	r22, 0x28	; 40
 14c:	8c 2f       	mov	r24, r28
 14e:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	TWIend();
 152:	0e 94 97 00 	call	0x12e	; 0x12e <TWIend>
}
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <OLEDwriteDual>:

void OLEDwriteDual(uint8_t DATA, uint8_t DATA2){
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	d8 2f       	mov	r29, r24
 160:	c6 2f       	mov	r28, r22
	TWIbegin(DEVID, 0x18);
 162:	68 e1       	ldi	r22, 0x18	; 24
 164:	88 e7       	ldi	r24, 0x78	; 120
 166:	0e 94 86 00 	call	0x10c	; 0x10c <TWIbegin>
	// RAM or COMMAND
	TWIwrite(COMMAND, 0x28);
 16a:	68 e2       	ldi	r22, 0x28	; 40
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	TWIwrite(DATA, 0x28);
 172:	68 e2       	ldi	r22, 0x28	; 40
 174:	8d 2f       	mov	r24, r29
 176:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	TWIwrite(DATA2, 0x28);
 17a:	68 e2       	ldi	r22, 0x28	; 40
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	TWIend();
 182:	0e 94 97 00 	call	0x12e	; 0x12e <TWIend>
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <OLEDwriteRAM>:

void OLEDwriteRAM(uint8_t DATA){
 18c:	cf 93       	push	r28
 18e:	c8 2f       	mov	r28, r24
	TWIbegin(DEVID, 0x18);
 190:	68 e1       	ldi	r22, 0x18	; 24
 192:	88 e7       	ldi	r24, 0x78	; 120
 194:	0e 94 86 00 	call	0x10c	; 0x10c <TWIbegin>
	// RAM or COMMAND
	TWIwrite(RAMCOM, 0x28);
 198:	68 e2       	ldi	r22, 0x28	; 40
 19a:	80 e4       	ldi	r24, 0x40	; 64
 19c:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	//
	TWIwrite(DATA, 0x28);
 1a0:	68 e2       	ldi	r22, 0x28	; 40
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	TWIend();
 1a8:	0e 94 97 00 	call	0x12e	; 0x12e <TWIend>
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <setPage>:

void setPage(uint8_t page) {
	OLEDwrite(0xB0 | page);
 1b0:	80 6b       	ori	r24, 0xB0	; 176
 1b2:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
 1b6:	08 95       	ret

000001b8 <clrOLED>:
}

void clrOLED(uint8_t pixels){
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	d8 2f       	mov	r29, r24
	for(uint8_t i = 0; i < 8;i++){
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	0c c0       	rjmp	.+24     	; 0x1dc <clrOLED+0x24>
		setPage(i);
 1c4:	81 2f       	mov	r24, r17
 1c6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <setPage>
		for(uint8_t j = 0; j < WIDTH; j++){
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <clrOLED+0x1e>
			OLEDwriteRAM(pixels);
 1ce:	8d 2f       	mov	r24, r29
 1d0:	0e 94 c6 00 	call	0x18c	; 0x18c <OLEDwriteRAM>
}

void clrOLED(uint8_t pixels){
	for(uint8_t i = 0; i < 8;i++){
		setPage(i);
		for(uint8_t j = 0; j < WIDTH; j++){
 1d4:	cf 5f       	subi	r28, 0xFF	; 255
 1d6:	c4 38       	cpi	r28, 0x84	; 132
 1d8:	d0 f3       	brcs	.-12     	; 0x1ce <clrOLED+0x16>
void setPage(uint8_t page) {
	OLEDwrite(0xB0 | page);
}

void clrOLED(uint8_t pixels){
	for(uint8_t i = 0; i < 8;i++){
 1da:	1f 5f       	subi	r17, 0xFF	; 255
 1dc:	18 30       	cpi	r17, 0x08	; 8
 1de:	90 f3       	brcs	.-28     	; 0x1c4 <clrOLED+0xc>
		setPage(i);
		for(uint8_t j = 0; j < WIDTH; j++){
			OLEDwriteRAM(pixels);
		}
	}
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	08 95       	ret

000001e8 <writeSpace>:

void writeSpace(uint8_t spaceSize) {
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	d8 2f       	mov	r29, r24
	for (uint8_t y = 0; y < spaceSize; y++) {
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <writeSpace+0x12>
		OLEDwriteRAM(0x00);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 c6 00 	call	0x18c	; 0x18c <OLEDwriteRAM>
		}
	}
}

void writeSpace(uint8_t spaceSize) {
	for (uint8_t y = 0; y < spaceSize; y++) {
 1f8:	cf 5f       	subi	r28, 0xFF	; 255
 1fa:	cd 17       	cp	r28, r29
 1fc:	d0 f3       	brcs	.-12     	; 0x1f2 <writeSpace+0xa>
		OLEDwriteRAM(0x00);
	}
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <setColumn>:

void setColumn(uint8_t increment) {
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24
	OLEDwrite(0b00010000 | (increment & 0b00001111));
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
	OLEDwrite(0b00000000 | ((increment & 0b11110000) >> 4));
 210:	8c 2f       	mov	r24, r28
 212:	82 95       	swap	r24
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
}
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <printLetter>:

void printLetter(uint16_t startPos, uint8_t page, uint8_t space){
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	8c 01       	movw	r16, r24
	uint8_t column = 0x00;
	for (uint8_t xPos = 0; xPos < 8; xPos++) {
 226:	c0 e0       	ldi	r28, 0x00	; 0
 228:	09 c0       	rjmp	.+18     	; 0x23c <printLetter+0x1e>
		column = fontArray[startPos + xPos];
 22a:	f8 01       	movw	r30, r16
 22c:	ec 0f       	add	r30, r28
 22e:	f1 1d       	adc	r31, r1
 230:	e0 50       	subi	r30, 0x00	; 0
 232:	ff 4f       	sbci	r31, 0xFF	; 255
		/*
		if (column != 0) {
			OLEDwriteRAM(column);
		}
		*/
		OLEDwriteRAM(column);
 234:	80 81       	ld	r24, Z
 236:	0e 94 c6 00 	call	0x18c	; 0x18c <OLEDwriteRAM>
	OLEDwrite(0b00000000 | ((increment & 0b11110000) >> 4));
}

void printLetter(uint16_t startPos, uint8_t page, uint8_t space){
	uint8_t column = 0x00;
	for (uint8_t xPos = 0; xPos < 8; xPos++) {
 23a:	cf 5f       	subi	r28, 0xFF	; 255
 23c:	c8 30       	cpi	r28, 0x08	; 8
 23e:	a8 f3       	brcs	.-22     	; 0x22a <printLetter+0xc>
		}
		*/
		OLEDwriteRAM(column);
	}
	//writeSpace(space);
}
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	08 95       	ret

00000248 <OLEDstring>:

// Page, column, text
void OLEDstring(uint8_t page, uint8_t column, char text[] ){
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	08 2f       	mov	r16, r24
 252:	16 2f       	mov	r17, r22
 254:	ea 01       	movw	r28, r20
	setPage(page);
 256:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <setPage>
	setColumn(column + 2);
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	81 0f       	add	r24, r17
 25e:	0e 94 02 01 	call	0x204	; 0x204 <setColumn>
	for (uint8_t stringPos = 0; stringPos < (strlen(text) -1); stringPos++) {
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	25 c0       	rjmp	.+74     	; 0x2b0 <OLEDstring+0x68>
		uint16_t startPos = text[stringPos];
 266:	fe 01       	movw	r30, r28
 268:	e8 0f       	add	r30, r24
 26a:	f9 1f       	adc	r31, r25
 26c:	80 81       	ld	r24, Z
 26e:	90 e0       	ldi	r25, 0x00	; 0
		if (startPos > 32 && startPos < 91) {
 270:	9c 01       	movw	r18, r24
 272:	21 52       	subi	r18, 0x21	; 33
 274:	31 09       	sbc	r19, r1
 276:	2a 33       	cpi	r18, 0x3A	; 58
 278:	31 05       	cpc	r19, r1
 27a:	68 f4       	brcc	.+26     	; 0x296 <OLEDstring+0x4e>
			startPos = (startPos - 33) * 8;
 27c:	81 52       	subi	r24, 0x21	; 33
 27e:	90 4e       	sbci	r25, 0xE0	; 224
			printLetter(startPos, page, 2);
 280:	42 e0       	ldi	r20, 0x02	; 2
 282:	60 2f       	mov	r22, r16
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	0e 94 0f 01 	call	0x21e	; 0x21e <printLetter>
 294:	0c c0       	rjmp	.+24     	; 0x2ae <OLEDstring+0x66>
			} else if (startPos == 32) {
 296:	80 97       	sbiw	r24, 0x20	; 32
 298:	21 f4       	brne	.+8      	; 0x2a2 <OLEDstring+0x5a>
			writeSpace(2);
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <writeSpace>
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <OLEDstring+0x66>
			} else {
			printLetter(464, page, 2);
 2a2:	42 e0       	ldi	r20, 0x02	; 2
 2a4:	60 2f       	mov	r22, r16
 2a6:	80 ed       	ldi	r24, 0xD0	; 208
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 0f 01 	call	0x21e	; 0x21e <printLetter>

// Page, column, text
void OLEDstring(uint8_t page, uint8_t column, char text[] ){
	setPage(page);
	setColumn(column + 2);
	for (uint8_t stringPos = 0; stringPos < (strlen(text) -1); stringPos++) {
 2ae:	1f 5f       	subi	r17, 0xFF	; 255
 2b0:	81 2f       	mov	r24, r17
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fe 01       	movw	r30, r28
 2b6:	01 90       	ld	r0, Z+
 2b8:	00 20       	and	r0, r0
 2ba:	e9 f7       	brne	.-6      	; 0x2b6 <OLEDstring+0x6e>
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	ec 1b       	sub	r30, r28
 2c0:	fd 0b       	sbc	r31, r29
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	8e 17       	cp	r24, r30
 2c6:	9f 07       	cpc	r25, r31
 2c8:	70 f2       	brcs	.-100    	; 0x266 <OLEDstring+0x1e>
			writeSpace(2);
			} else {
			printLetter(464, page, 2);
		}
	}
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <ADXLwrite>:

void ADXLwrite(uint8_t ADDRESS, uint8_t DATA){
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	d8 2f       	mov	r29, r24
 2da:	c6 2f       	mov	r28, r22
	TWIbegin(ADXLID | WRITE, 0x18);
 2dc:	68 e1       	ldi	r22, 0x18	; 24
 2de:	86 ea       	ldi	r24, 0xA6	; 166
 2e0:	0e 94 86 00 	call	0x10c	; 0x10c <TWIbegin>
	TWIwrite(ADDRESS, 0x28);
 2e4:	68 e2       	ldi	r22, 0x28	; 40
 2e6:	8d 2f       	mov	r24, r29
 2e8:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	TWIwrite(DATA, 0x28);
 2ec:	68 e2       	ldi	r22, 0x28	; 40
 2ee:	8c 2f       	mov	r24, r28
 2f0:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	TWIend();
 2f4:	0e 94 97 00 	call	0x12e	; 0x12e <TWIend>
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <ADXLread>:

uint8_t ADXLread(uint8_t ADDRESS){
 2fe:	cf 93       	push	r28
 300:	c8 2f       	mov	r28, r24
	TWIbegin(ADXLID | WRITE, 0x18);
 302:	68 e1       	ldi	r22, 0x18	; 24
 304:	86 ea       	ldi	r24, 0xA6	; 166
 306:	0e 94 86 00 	call	0x10c	; 0x10c <TWIbegin>
	TWIwrite(ADDRESS, 0x28);
 30a:	68 e2       	ldi	r22, 0x28	; 40
 30c:	8c 2f       	mov	r24, r28
 30e:	0e 94 63 00 	call	0xc6	; 0xc6 <TWIwrite>
	uint8_t recievedByte = TWIread(ADXLID | READ);
 312:	87 ea       	ldi	r24, 0xA7	; 167
 314:	0e 94 6c 00 	call	0xd8	; 0xd8 <TWIread>
 318:	c8 2f       	mov	r28, r24
	
	TWIend();
 31a:	0e 94 97 00 	call	0x12e	; 0x12e <TWIend>
	uint8_t readData = TWIread(0x50);
	TWIend();
	return readData;
	*/
	return recievedByte;
}
 31e:	8c 2f       	mov	r24, r28
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <main>:


int main(void)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	00 d0       	rcall	.+0      	; 0x32a <main+0x6>
 32a:	00 d0       	rcall	.+0      	; 0x32c <main+0x8>
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 334:	15 b8       	out	0x05, r1	; 5
	
	TWIinit();
 336:	0e 94 4e 00 	call	0x9c	; 0x9c <TWIinit>
	
	OLEDwrite(0xAE);
 33a:	8e ea       	ldi	r24, 0xAE	; 174
 33c:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
	OLEDwriteDual(0xD5, 0x80);
 340:	60 e8       	ldi	r22, 0x80	; 128
 342:	85 ed       	ldi	r24, 0xD5	; 213
 344:	0e 94 ad 00 	call	0x15a	; 0x15a <OLEDwriteDual>
	OLEDwriteDual(0xD3, 0x00);
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	83 ed       	ldi	r24, 0xD3	; 211
 34c:	0e 94 ad 00 	call	0x15a	; 0x15a <OLEDwriteDual>
	OLEDwrite(0x40);
 350:	80 e4       	ldi	r24, 0x40	; 64
 352:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
	OLEDwriteDual(0xAD, 0x8B);
 356:	6b e8       	ldi	r22, 0x8B	; 139
 358:	8d ea       	ldi	r24, 0xAD	; 173
 35a:	0e 94 ad 00 	call	0x15a	; 0x15a <OLEDwriteDual>
	OLEDwrite(0x33);
 35e:	83 e3       	ldi	r24, 0x33	; 51
 360:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
	OLEDwrite(0xC8);
 364:	88 ec       	ldi	r24, 0xC8	; 200
 366:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
	OLEDwrite(0xA1);
 36a:	81 ea       	ldi	r24, 0xA1	; 161
 36c:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
	OLEDwriteDual(0xDA, 0x12);
 370:	62 e1       	ldi	r22, 0x12	; 18
 372:	8a ed       	ldi	r24, 0xDA	; 218
 374:	0e 94 ad 00 	call	0x15a	; 0x15a <OLEDwriteDual>
	OLEDwriteDual(0xD9, 0xF1);
 378:	61 ef       	ldi	r22, 0xF1	; 241
 37a:	89 ed       	ldi	r24, 0xD9	; 217
 37c:	0e 94 ad 00 	call	0x15a	; 0x15a <OLEDwriteDual>
	OLEDwriteDual(0xDB, 0x40);
 380:	60 e4       	ldi	r22, 0x40	; 64
 382:	8b ed       	ldi	r24, 0xDB	; 219
 384:	0e 94 ad 00 	call	0x15a	; 0x15a <OLEDwriteDual>
	OLEDwriteDual(0x81, 0xFF);
 388:	6f ef       	ldi	r22, 0xFF	; 255
 38a:	81 e8       	ldi	r24, 0x81	; 129
 38c:	0e 94 ad 00 	call	0x15a	; 0x15a <OLEDwriteDual>
	OLEDwrite(0xA4);
 390:	84 ea       	ldi	r24, 0xA4	; 164
 392:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
	OLEDwrite(0xA6);
 396:	86 ea       	ldi	r24, 0xA6	; 166
 398:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
	clrOLED(0x00);
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <clrOLED>
	OLEDwrite(0xAF);
 3a2:	8f ea       	ldi	r24, 0xAF	; 175
 3a4:	0e 94 9b 00 	call	0x136	; 0x136 <OLEDwrite>
	
	OLEDstring(0, 0, "1");
 3a8:	48 ed       	ldi	r20, 0xD8	; 216
 3aa:	52 e0       	ldi	r21, 0x02	; 2
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 24 01 	call	0x248	; 0x248 <OLEDstring>

	// ADXL345 SETUP
	ADXLwrite(0x31, 0x00);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	81 e3       	ldi	r24, 0x31	; 49
 3b8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ADXLwrite>
	ADXLwrite(0x2C, 0x0A);
 3bc:	6a e0       	ldi	r22, 0x0A	; 10
 3be:	8c e2       	ldi	r24, 0x2C	; 44
 3c0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ADXLwrite>
	ADXLwrite(0x2D, 0x08);
 3c4:	68 e0       	ldi	r22, 0x08	; 8
 3c6:	8d e2       	ldi	r24, 0x2D	; 45
 3c8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ADXLwrite>
	// Read ID
	uint8_t ADXL = ADXLread(0x00);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ADXLread>
	
	/**/
	while(1){
		uint8_t xRegister = ADXLread(0x32);
 3d2:	82 e3       	ldi	r24, 0x32	; 50
 3d4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ADXLread>
		
		char id = xRegister;
		char str[4];
		for(uint8_t i = 0; i < 3; i++){
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	20 c0       	rjmp	.+64     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			str[2 - i] = id % 10;
 3dc:	e2 e0       	ldi	r30, 0x02	; 2
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	e3 1b       	sub	r30, r19
 3e2:	f1 09       	sbc	r31, r1
 3e4:	2d ec       	ldi	r18, 0xCD	; 205
 3e6:	82 9f       	mul	r24, r18
 3e8:	21 2d       	mov	r18, r1
 3ea:	11 24       	eor	r1, r1
 3ec:	92 2f       	mov	r25, r18
 3ee:	96 95       	lsr	r25
 3f0:	96 95       	lsr	r25
 3f2:	96 95       	lsr	r25
 3f4:	99 0f       	add	r25, r25
 3f6:	49 2f       	mov	r20, r25
 3f8:	44 0f       	add	r20, r20
 3fa:	44 0f       	add	r20, r20
 3fc:	94 0f       	add	r25, r20
 3fe:	89 1b       	sub	r24, r25
 400:	98 2f       	mov	r25, r24
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	4c 0f       	add	r20, r28
 408:	5d 1f       	adc	r21, r29
 40a:	e4 0f       	add	r30, r20
 40c:	f5 1f       	adc	r31, r21
			str[2 - i] += 0x30;
 40e:	90 5d       	subi	r25, 0xD0	; 208
 410:	90 83       	st	Z, r25
			id /= 10;
 412:	82 2f       	mov	r24, r18
 414:	86 95       	lsr	r24
 416:	86 95       	lsr	r24
 418:	86 95       	lsr	r24
	while(1){
		uint8_t xRegister = ADXLread(0x32);
		
		char id = xRegister;
		char str[4];
		for(uint8_t i = 0; i < 3; i++){
 41a:	3f 5f       	subi	r19, 0xFF	; 255
 41c:	33 30       	cpi	r19, 0x03	; 3
 41e:	f0 f2       	brcs	.-68     	; 0x3dc <main+0xb8>
			str[2 - i] = id % 10;
			str[2 - i] += 0x30;
			id /= 10;
		}
		str[4] = '\0';
 420:	1d 82       	std	Y+5, r1	; 0x05
		
		//clrOLED(0x00);
		OLEDstring(0, 0, str);
 422:	ae 01       	movw	r20, r28
 424:	4f 5f       	subi	r20, 0xFF	; 255
 426:	5f 4f       	sbci	r21, 0xFF	; 255
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 24 01 	call	0x248	; 0x248 <OLEDstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 430:	5f ef       	ldi	r21, 0xFF	; 255
 432:	89 e6       	ldi	r24, 0x69	; 105
 434:	98 e1       	ldi	r25, 0x18	; 24
 436:	51 50       	subi	r21, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
		
		_delay_ms(500);
	}
 442:	c7 cf       	rjmp	.-114    	; 0x3d2 <main+0xae>

00000444 <_exit>:
 444:	f8 94       	cli

00000446 <__stop_program>:
 446:	ff cf       	rjmp	.-2      	; 0x446 <__stop_program>
